#!/bin/bash

# Get the repository root directory
REPO_ROOT=$(git rev-parse --show-toplevel)

# Directory and file for commit logs
LOG_DIR="$REPO_ROOT/logs"  # Logs directory in the repository root
COMMIT_LOG_FILE="$LOG_DIR/commit_messages.log"

# Ensure the log directory exists
mkdir -p "$LOG_DIR"

# Get commit details
COMMIT_HASH=$(git rev-parse HEAD)
COMMIT_MESSAGE=$(git log -1 --pretty=format:"%B")  # Full commit message
AUTHOR=$(git log -1 --pretty=format:"%an")
DATE=$(git log -1 --pretty=format:"%ad" --date=iso)
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

# Fetch changed files with statuses
CHANGED_FILES=$(git show --pretty="" --name-status HEAD)

# Skip log update commits
if [[ "$COMMIT_MESSAGE" == "Update commit logs:"* ]] && [[ "$COMMIT_HASH" == "$(git rev-parse HEAD)" ]]; then
  echo "Skipping log update commit."
  exit 0
fi

# Append commit information to the log file
{
  echo "---------------------------------------------"
  echo "Commit Hash:   $COMMIT_HASH"
  echo "Branch:        $BRANCH_NAME"
  echo "Author:        $AUTHOR"
  echo "Date:          $DATE"
  echo "Message:"
  echo "$COMMIT_MESSAGE"
  echo
  echo "Changed Files:"
  echo "$CHANGED_FILES"
  echo "---------------------------------------------"
} >> "$COMMIT_LOG_FILE"

echo "Commit message logged to $COMMIT_LOG_FILE"

# Prevent recursive commits
SKIP_COMMIT_MARKER="$REPO_ROOT/.git/SKIP_POST_COMMIT"

if [ -f "$SKIP_COMMIT_MARKER" ]; then
  echo "Skipping post-commit actions to prevent recursion."
  rm -f "$SKIP_COMMIT_MARKER"  # Remove the marker for future commits
  exit 0
fi

# Automatically stage, commit, and push the log file
cd "$REPO_ROOT"  # Ensure commands are run from the repository root

# Stage the log file
git add "$COMMIT_LOG_FILE"
if [ $? -ne 0 ]; then
  echo "ERROR: Failed to stage $COMMIT_LOG_FILE"
  exit 1
fi
echo "DEBUG: Successfully staged $COMMIT_LOG_FILE"

# Commit the log file if there are changes
if ! git diff --cached --quiet; then
  # Create the marker file to prevent recursion
  touch "$SKIP_COMMIT_MARKER"

  # Commit the log file
  git commit -m "Update commit logs: $COMMIT_HASH"
  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to commit $COMMIT_LOG_FILE"
    rm -f "$SKIP_COMMIT_MARKER"
    exit 1
  fi
  echo "DEBUG: Successfully committed $COMMIT_LOG_FILE"

  # Optional Push: Controlled by an environment variable
  if [ "$GIT_AUTO_PUSH" == "true" ]; then
    git push origin "$(git rev-parse --abbrev-ref HEAD)"
    if [ $? -ne 0 ]; then
      echo "ERROR: Failed to push changes"
      rm -f "$SKIP_COMMIT_MARKER"
      exit 1
    fi
    echo "DEBUG: Successfully pushed $COMMIT_LOG_FILE"
  else
    echo "Auto-push is disabled. Skipping push step."
  fi
else
  echo "No changes to commit."
fi

#!/bin/bash

# Get the repository root directory
REPO_ROOT=$(git rev-parse --show-toplevel)

# Directory and file for commit logs
LOG_DIR="$REPO_ROOT/logs"  # Logs directory in the repository root
COMMIT_LOG_FILE="$LOG_DIR/commit_log.md"

# Ensure the log directory exists
mkdir -p "$LOG_DIR"

# Get commit details
COMMIT_HASH=$(git rev-parse HEAD)
COMMIT_SHORT_HASH=$(git rev-parse --short=8 HEAD) 
COMMIT_MESSAGE=$(git log -1 --pretty=format:"%B")  # Full commit message
AUTHOR=$(git log -1 --pretty=format:"%an")
DATE=$(git log -1 --pretty=format:"%ad" --date=iso)
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

# Fetch changed files with statuses
CHANGED_FILES=$(git show --pretty="" --name-status HEAD)

# Check for sensitive files (for security)
SENSITIVE_FILES=$(echo "$CHANGED_FILES" | grep -i -E '(\.env|\.gitignore|secrets|config)')
if [[ ! -z "$SENSITIVE_FILES" ]]; then
    echo "Error: Sensitive files detected in this commit. Aborting commit logging."
    exit 1
fi

# Skip log update commits
if [[ "$COMMIT_MESSAGE" == "Update commit logs:"* ]] && [[ "$COMMIT_HASH" == "$(git rev-parse HEAD)" ]]; then
  echo "Skipping log update commit."
  exit 0
fi

# Create the individual commit file with full details
{
    echo "# Commit Hash: $COMMIT_HASH"
    echo "## Short hash: $COMMIT_SHORT_HASH"
    echo "### Author: $AUTHOR"
    echo "### Date: $DATE"
    echo "### Branch: $BRANCH_NAME"
    echo ""
    echo "## Commit Message"
    echo "$COMMIT_MESSAGE"
    echo ""
    echo "## Changed Files:"
    echo "$CHANGED_FILES"
} > "$LOG_DIR/commit_$COMMIT_HASH.md"

echo "Commit message logged to $LOG_DIR/commit_$COMMIT_HASH.md"

# Append a summary to the main commit log (commit_log.md)
{
    echo "### [$COMMIT_SHORT_HASH: $COMMIT_MESSAGE]($LOG_DIR/commit_$COMMIT_HASH.md)"
    echo "- **Date**: $DATE"
    echo "- **Author**: $AUTHOR"
    echo "- **Branch**: $BRANCH_NAME"
    echo ""
} >> "$COMMIT_LOG_FILE"

echo "Commit message logged to $COMMIT_LOG_FILE"

# Prevent recursive commits
SKIP_COMMIT_MARKER="$REPO_ROOT/.git/SKIP_POST_COMMIT"

if [ -f "$SKIP_COMMIT_MARKER" ]; then
  echo "Skipping post-commit actions to prevent recursion."
  rm -f "$SKIP_COMMIT_MARKER"  # Remove the marker for future commits
  exit 0
fi

# Automatically stage, commit, and push the log file
cd "$REPO_ROOT"  # Ensure commands are run from the repository root

# Stage the log files
git add "$COMMIT_LOG_FILE" "$LOG_DIR/commit_$COMMIT_HASH.md"
if [ $? -ne 0 ]; then
  echo "ERROR: Failed to stage commit log files."
  exit 1
fi
echo "DEBUG: Successfully staged log files."

# Commit the log files if there are changes
if ! git diff --cached --quiet; then
  # Create the marker file to prevent recursion
  touch "$SKIP_COMMIT_MARKER"

  # Commit the log files
  git commit -m "Update commit logs: $COMMIT_HASH"
  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to commit commit log files."
    rm -f "$SKIP_COMMIT_MARKER"
    exit 1
  fi
  echo "DEBUG: Successfully committed commit log files."

  # Optional Push: Controlled by an environment variable
  if [ "$GIT_AUTO_PUSH" == "true" ]; then
    git push origin "$(git rev-parse --abbrev-ref HEAD)"
    if [ $? -ne 0 ]; then
      echo "ERROR: Failed to push changes"
      rm -f "$SKIP_COMMIT_MARKER"
      exit 1
    fi
    echo "DEBUG: Successfully pushed commit log files."
  else
    echo "Auto-push is disabled. Skipping push step."
  fi
else
  echo "No changes to commit."
fi

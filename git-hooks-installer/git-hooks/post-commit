#!/bin/bash
# post-commit

# Prevent recursive execution using a marker file
MARKER_FILE=$(git rev-parse --git-path hooks/.post-commit.lock)

if [ -f "$MARKER_FILE" ]; then
  echo "Skipping post-commit actions to prevent recursion."
  exit 0
fi

# Create the marker file
touch "$MARKER_FILE"

# Ensure marker is removed even if the script fails
trap 'rm -f "$MARKER_FILE"' EXIT

# Get the repository root directory
REPO_ROOT=$(git rev-parse --show-toplevel)

# Get commit details
COMMIT_HASH=$(git rev-parse HEAD)
COMMIT_MESSAGE=$(git log -1 --pretty=format:"%B")  # Full commit message
AUTHOR=$(git log -1 --pretty=format:"%an")
DATE=$(git log -1 --pretty=format:"%ad" --date=iso)
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

# Fetch changed files with statuses
CHANGED_FILES=$(git show --pretty="" --name-status HEAD)

# Skip log update commits
if [[ "$COMMIT_MESSAGE" == "Update commit logs:"* ]] && [[ "$COMMIT_HASH" == "$(git rev-parse HEAD)" ]]; then
  echo "Skipping log update commit."
  exit 0
fi

# Ensure we are in the repository root
cd "$REPO_ROOT" || { echo "ERROR: Could not navigate to repository root"; exit 1; }

# Define the log directory
LOG_DIR="docs/commit-logs/$BRANCH_NAME"

# Ensure the directory exists
mkdir -p "$LOG_DIR" || { echo "ERROR: Could not create directory $LOG_DIR. Check permissions."; exit 1; }

# Define the log file name with branch structure and shortened hash
SHORT_HASH=$(echo "$COMMIT_HASH" | cut -c 1-8)
LOG_FILE="$LOG_DIR/$SHORT_HASH.md"

# Write the Markdown log
{
  echo "# Commit Log"
  echo
  echo "---"
  echo
  echo "## Commit Details"
  echo
  echo "- **Commit Hash:**   \`$COMMIT_HASH\`"
  echo "- **Branch:**        \`$BRANCH_NAME\`"
  echo "- **Author:**        $AUTHOR"
  echo "- **Date:**          $DATE"
  echo "- **Message:**"
  echo
  echo "  $COMMIT_MESSAGE"
  echo
  echo "---"
  echo
  echo "## Changed Files:"
  echo
  while IFS= read -r line; do
    echo "- \`$line\`"
  done <<< "$CHANGED_FILES"
  echo
  echo "---"
} > "$LOG_FILE"

echo "Commit message logged to $LOG_FILE"

# Prevent recursive commits
# SKIP_COMMIT_MARKER="$REPO_ROOT/.git/SKIP_POST_COMMIT"

#if [ -f "$SKIP_COMMIT_MARKER" ]; then
#  echo "Skipping post-commit actions to prevent recursion."
#  rm -f "$SKIP_COMMIT_MARKER"  # Remove the marker for future commits
#  exit 0
#fi

# Automatically stage, commit, and push the log file
cd "$REPO_ROOT"  # Ensure commands are run from the repository root

# Stage the log file
git add "$LOG_FILE"
if [ $? -ne 0 ]; then
  echo "ERROR: Failed to stage $LOG_FILE"
  exit 1
fi
echo "DEBUG: Successfully staged $LOG_FILE"

# Update branch-specific README.md
export BRANCH_NAME="$BRANCH_NAME"  # Pass branch name to the script
bash "$REPO_ROOT/scripts/post-commit/update-readme.sh"

# Commit the log file if there are changes
if ! git diff --cached --quiet; then
#  # Create the marker file to prevent recursion
#  touch "$SKIP_COMMIT_MARKER"

  # Commit the log file
  git commit -m "Update commit logs: $COMMIT_HASH"
  if [ $? -ne 0 ]; then
    echo "ERROR: Failed to commit $LOG_FILE"
#    rm -f "$SKIP_COMMIT_MARKER"
    exit 1
  fi
  echo "DEBUG: Successfully committed $LOG_FILE"


  # Optional Push: Controlled by an environment variable
  if [ "$GIT_AUTO_PUSH" == "true" ]; then
    git push origin "$(git rev-parse --abbrev-ref HEAD)"
    if [ $? -ne 0 ]; then
      echo "ERROR: Failed to push changes"
#      rm -f "$SKIP_COMMIT_MARKER"
      exit 1
    fi
    echo "DEBUG: Successfully pushed $LOG_FILE"
  else
    echo "Auto-push is disabled. Skipping push step."
  fi
else
  echo "No changes to commit."
fi